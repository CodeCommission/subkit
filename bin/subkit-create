#!/usr/bin/env node

const path = require('path');
const fse = require('fs-extra');
const program = require('commander');
const boxen = require('boxen');
const chalk = require('chalk');
const {cd, exec, which} = require('shelljs');

const hasYarn = () => Boolean(which('yarn'));

program
  .arguments('<name>')
  .option('-d, --docker', 'Include dockerfile')
  .option('-n, --node [version]', 'NodeJS 6/8 [8]')
  .action(name =>
    create({name, docker: program.docker, nodeVersion: program.node})
  )
  .parse(process.argv);

if (!program.args.length) create({});

function create({name = '.', docker, nodeVersion = '8'}) {
  if (!name) {
    console.error(chalk.red('Enter a project name.'));
    process.exit(1);
  }
  const projectDir = path.resolve(process.cwd(), name);

  fse
    .ensureDir(projectDir)
    .then(() =>
      fse.outputFile(
        path.resolve(projectDir, 'graphql.sdl'),
        createSchemaTmpl()
      )
    )
    .then(() =>
      fse.outputFile(
        path.resolve(projectDir, 'graphql.js'),
        createResolverTmpl()
      )
    )
    .then(() =>
      fse.outputFile(
        path.resolve(projectDir, 'package.json'),
        createPackageTmpl({name, nodeVersion})
      )
    )
    .then(() =>
      fse.outputFile(
        path.resolve(projectDir, 'test', 'graphql.test.js'),
        createSpecTmpl()
      )
    )
    .then(
      () =>
        docker
          ? fse.outputFile(
              path.resolve(projectDir, 'Dockerfile'),
              createDockerTmpl({name, nodeVersion})
            )
          : Promise.resolve()
    )
    .then(() => install({path: projectDir}))
    .then(() => {
      let message = `${chalk.green(`GraphQL API created!`)}\n\n`;
      message += `Run ${chalk.gray.bold(`${name}`)} with:\n\n`;
      message += `Development: ${chalk.gray.bold(`npm run dev`)}\n`;
      message += `Production : ${chalk.gray.bold(`npm start`)}\n`;
      message += `Test       : ${chalk.gray.bold(`npm test`)}`;
      console.log(boxen(message, {padding: 1, borderColor: 'gray', margin: 1}));
    })
    .catch(err => {
      console.error(chalk.red(`An unexpected error occured. ${err.message}`));
      process.exit(1);
    });
}

function createPackageTmpl({name, nodeVersion}) {
  return `{
    "private": true,
    "version": "0.0.0",
    "name": "${name}",
    "description": "My ${name} GraphQL-API",
    "engines": {
      "node": "^${nodeVersion}"
    },
    "dependencies": {
      "subkit": "latest"
    },
    "devDependencies": {
      "babel-preset-env": "^1.6.0",
      "mocha": "^4.0.1",
      "nodemon": "^1.12.1"
    },
    "babel": {
      "presets": ["env"]
    },
    "scripts": {
      "dev" : "nodemon --ext  gql,sdl,sdle,js --exec subkit serve --port 8080 --graphiql --analysis 1000 --extentions",
      "dev:mocked" : "nodemon --ext  gql,sdl,sdle,js --exec subkit serve --port 8080 --mocked --graphiql --analysis 1000 --extentions",
      "start": "NODE_ENV=production subkit serve --port 80 --graphiql --analysis 1000",
      "start:jwt": "NODE_ENV=production subkit serve --port 80 --secret SuperSecret --silent --analysis 1000",
      "test": "mocha --require babel-polyfill --require babel-register"
    }
  }`;
}

function createDockerTmpl({name, nodeVersion}) {
  return `FROM mhart/alpine-node:${nodeVersion}
STOPSIGNAL SIGINT
${nodeVersion == 6 ? '' : 'RUN apk add --no-cache dumb-init'}
ENV PORT=80
ENV NODE_ENV=production
EXPOSE 80
LABEL name "${name}"
RUN mkdir /app
WORKDIR /app
COPY package.json /app
RUN npm install --production
COPY . /app
${
    nodeVersion == 6
      ? 'CMD ["npm", "start"]'
      : 'CMD ["dumb-init", "npm", "start"]'
  }`;
}

function createSchemaTmpl() {
  return `type Item {
  id: ID
  email: String
}

type  Query {
  item(id: ID!): Item
  items: [Item]
}`;
}

function createSpecTmpl() {
  return `import assert from "assert";
  import { resolvers, loaders } from "../graphql";

  describe("Loaders Spec", () => {
    it("Should ...", async () => {
      const actual = await loaders.items();
      assert.deepEqual(actual, []);
    });
  });`;
}

function createResolverTmpl() {
  return `export const resolvers = {
  Query: {
    item: (parent, args, context, info) => context.loaders.item(args.id),
    items: (parent, args, context, info) => context.loaders.items()
  }
}

export const loaders = {
  items: async () => [],
  item: async id => ({id})
}

export const channels = {}

export const directives = {}`;
}

function install({path}) {
  return new Promise((resolve, reject) => {
    cd(path);
    const installCmd = hasYarn() ? 'yarn' : 'npm install';

    exec(installCmd, (code, stdout, stderr) => {
      if (code !== 0) return reject(stderr);
      resolve();
    });
  });
}
