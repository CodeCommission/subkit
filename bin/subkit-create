#!/usr/bin/env node

const path = require('path')
const fse = require('fs-extra')
const program = require('commander')
const boxen = require('boxen')
const chalk = require('chalk')
const {cd, exec, which} = require('shelljs')
const hasYarn = () => Boolean(which('yarn'))

program
  .arguments('<name>')
  .option('-d, --docker', 'Include dockerfile (mhart/alpine-node)')
  .option('-n, --node [version]', 'NodeJS 6/7/8 (mhart/alpine-node)')
  .action(name => create({name, docker: program.docker, nodeVersion: program.node}))
  .parse(process.argv)

if(!program.args.length) create({})

function create ({name = '.', docker, nodeVersion = '6'}) {
  if(!name) {
    console.error(chalk.red('Enter a project name.'))
    process.exit(1)
  }
  const projectDir = path.resolve(process.cwd(), name)

  fse.ensureDir(projectDir)
    .then(() => fse.outputFile(path.resolve(projectDir, 'graphql.idl'), createSchemaTmpl()))
    .then(() => fse.outputFile(path.resolve(projectDir, 'graphql.js'), createResolverTmpl()))
    .then(() => fse.outputFile(path.resolve(projectDir, 'package.json'), createPackageTmpl({name, nodeVersion})))
    .then(() => docker ? fse.outputFile(path.resolve(projectDir, 'Dockerfile'), createDockerTmpl({name, nodeVersion})) : Promise.resolve())
    .then(() => install({path: projectDir}))
    .then(() => {
      let message = `${chalk.green(`GraphQL API created!`)}\n\n`
      message += `Serve ${chalk.gray.bold(`${name}`)} with:\n\n`
      message += `Development: ${chalk.gray.bold(`npm run dev`)}\n`
      message += `Production : ${chalk.gray.bold(`npm start`)}`
      console.log(boxen(message, {padding: 1, borderColor: 'gray', margin: 1}))
    })
    .catch(err => {
      console.error(chalk.red(`An unexpected error occured. ${err.message}`))
      process.exit(1)
    })
}

function createPackageTmpl ({name, nodeVersion}) {
  return `{
    "private": true,
    "version": "0.0.0",
    "name": "${name}",
    "description": "My GraphQL API",
    "engines": {
      "node": "^${nodeVersion}"
    },
    "dependencies": {
      "subkit": "latest"
    },
    "scripts": {
      "dev" : "subkit serve --port 8080 --mocked --secret SuperSecret",
      "start": "PORT=80 NODE_ENV=production subkit serve --silent"
    }
  }`
}

function createDockerTmpl ({name, nodeVersion}) {
  return `FROM mhart/alpine-node:${nodeVersion}
ENV PORT=80
ENV NODE_ENV=production
EXPOSE 80
LABEL name "${name}"
RUN mkdir /app
WORKDIR /app
COPY package.json /app
RUN npm install --production
COPY . /app
CMD ["npm", "start"]`
}

function createSchemaTmpl () {
  return ``
}

function createResolverTmpl () {
  return ``
}

function install ({path}) {
  return new Promise((resolve, reject) => {
    cd(path)
    const installCmd = hasYarn() ? 'yarn' : 'npm install'

    exec(installCmd, (code, stdout, stderr) => {
      if (code !== 0) return reject(stderr)
      resolve()
    })
  })
}