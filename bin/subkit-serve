#!/usr/bin/env node

const NODE_ENV = process.env.NODE_ENV || 'development';
const JWT_SECRET = process.env.JWT_SECRET;
const MOCKED = process.env.MOCKED;
const PORT = process.env.PORT;
const HOST = process.env.HOST;

const program = require('commander');
const boxen = require('boxen');
const chalk = require('chalk');
require('babel-polyfill');
require('isomorphic-fetch');
require('babel-register')({presets: ['env']});

program
  .option('-h, --host [ip]', 'Host to listen on.')
  .option('-p, --port [port]', 'Port to listen on.')
  .option('-s, --silent', 'Enable silent mode.')
  .option('-j, --secret [secret]', 'JWT secret.')
  .option('-g, --graphiql', 'Enable GraphiQL.')
  .option('-m, --mocked', 'Mock resolver data.')
  .option('-a, --analysis [int]', 'Enable query complexity analysis.')
  .option('-e, --extentions', 'Enable query extentions.')
  .action(() => serve(program.opts()))
  .parse(process.argv);

if (!program.args.length) serve(program.opts());

function serve({
  port = PORT || null,
  host = HOST || '0.0.0.0',
  silent = false,
  analysis = 0,
  mocked = Boolean(MOCKED),
  secret = JWT_SECRET,
  graphiql = false,
  extentions = false
}) {
  require('../lib')
    .start({
      port,
      host,
      mocked,
      secret,
      graphiql,
      analysis: parseInt(analysis),
      extentions
    })
    .then(({url, isSecure}) => {
      if (!silent) {
        let message = `${chalk.green(`Listening (${NODE_ENV})`)}\n\n`;
        message += `JWT secured    : ${chalk.gray.bold(`${isSecure}`)}\n`;
        message += `Extentions     : ${chalk.gray.bold(`${extentions}`)}\n`;
        message += `Mock responses : ${chalk.gray.bold(`${mocked}`)}\n`;
        message += `Query analysis : ${chalk.gray.bold(
          `${Boolean(analysis)}`
        )}\n`;
        if (analysis)
          message += `Complexity max : ${chalk.gray.bold(`${analysis}`)}\n`;
        message += `GraphiQL       : ${chalk.gray.bold(`${graphiql}`)}\n`;
        message += `\n${chalk.gray.bold(`${url}`)}`;
        console.log(
          boxen(message, {padding: 1, borderColor: 'gray', margin: 1})
        );
      }
    })
    .catch(e => {
      console.error(chalk.red('An unexpected error occurred.'));
      console.error(
        JSON.stringify({
          message: e.message,
          error: e,
          stack: e.stack,
          type: 'Error'
        })
      );
      process.exit(1);
    });
}
