type Value {
  some: String
}

type Item {
  id: ID! @complexity(cost: 11) @cacheControl(maxAge: 22)
  email: String @complexity(cost: 12)
  items: [Item]
  value: Value
}

type Viewer {
  id: ID
  items(take: Int, skip: Int): [Item]
}

# Root queries
type Query {
  # Item by ID
  item(id: ID!): Item
  # All items
  items(take: Int, skip: Int): [Item] @complexity(multiplier: "take") @cacheControl(maxAge: 30)
  viewer(id: ID): Viewer
}

input ItemInput {
  id: ID!
  email: String
}

type Mutation {
  # Insert or update an item
  upsertItem(input: ItemInput!): Item
}

type Subscription {
  # Emitted event on item changes
  onItemUpserted: Item
}